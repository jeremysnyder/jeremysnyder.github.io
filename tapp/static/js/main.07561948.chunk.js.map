{"version":3,"sources":["reducers/settings.js","Files.js","Config.js","actions/settings.js","actions/data.js","App.js","serviceWorker.js","reducers/root.js","reducers/data.js","index.js","store.js"],"names":["activities","tagIds","initialConfig","reduce","all","t","values","allActivities","a","Object","objectSpread","defineProperty","google","require","key","uploadFile","content","auth","JWT","client_email","private_key","uploadFilez","Config","activity","tagId","e","_this$props","this","props","config","updateConfig","setState","updated","Date","now","_this","setInterval","_this$props2","tagData","recordData","keys","x","concat","toConsumableArray","settings","lines","line","join","Array","fill","toCsvLines","_this$props3","resetData","timestamp","fileData","tag","date","format","fileName","console","log","_this2","react_default","createElement","className","rowSpan","colSpan","length","map","type","onChange","toggle","bind","checked","onClick","React","Component","connect","state","data","dispatch","payload","App","src_Config","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","ReactDOM","render","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07561948.chunk.js","sourcesContent":["export const activities = [\n  'Drinking',\n  'Eating',\n  'Walking',\n  'Standing',\n  'Sitting',\n  'Chewing Cud',\n  'High Activity Heat',\n  'Standing Heat',\n  'In Parlor'\n]\n\nexport const tagIds = [\n  '100',\n  '101',\n  '102',\n  '103',\n  '104',\n  '105',\n  '106'\n]\n\nconst initialConfig = tagIds.reduce((all, t) => {\n  const values = activities.reduce((allActivities, a) => {\n    return {...allActivities, [a]: false}\n  }, {})\n  return {...all, [t]: values}\n}, {})\n\n// const initialConfig = activities.reduce((all, x) => {\n//   const tagValues = tagIds.reduce((allTags, t) => {\n//     return {...allTags, [t]: false}\n//   }, {})\n//   return {...all, [x]: tagValues}\n// }, {})\n\nexport default (state = {config: initialConfig}, action) => {\n  switch (action.type) {\n   case 'UPDATE_CONFIG':\n    return {\n     config: action.payload\n    }\n   default:\n    return state\n  }\n }","// import gapi from 'gapi'\n// import React from 'react';\n// import './App.css';\n// import { connect } from 'react-redux'\n// import { updateConfig } from './actions/settings'\n// import { tagIds, activities } from './reducers/settings'\n\n// AIzaSyBkAQ4kb1-w-yvrnWfbcYqwwj3FFl0zeD0\n\n// export const uploadFile = (fileContent) => {\n//   return new Promise(resolve => {\n//     // var fileContent = 'sample text'; // As a sample, upload a text file.\n//     var file = new Blob([fileContent], {type: 'text/plain'});\n//     var metadata = {\n//         'name': 'sampleName', // Filename at Google Drive\n//         'mimeType': 'text/plain', // mimeType at Google Drive\n//         'parents': ['### folder ID ###'], // Folder ID at Google Drive\n//     };\n\n//     const accessToken = 'AIzaSyBkAQ4kb1-w-yvrnWfbcYqwwj3FFl0zeD0'\n//     // var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.\n//     var form = new FormData();\n//     form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n//     form.append('file', file);\n\n//     fetch(`https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id&key=${accessToken}`, {\n//         method: 'POST',\n//         headers: new Headers({ 'Authorization': 'Bearer ' + accessToken }),\n//         body: form,\n//     }).then((res) => {\n//         return res.json();\n//     }).then(function(val) {\n//       resolve(val)\n//     });\n//   })\n// }\n\nconst { google } = require('googleapis')\n// const fs = require('fs')\nconst key = require('./private/t-app-user.json')\n\nexport const uploadFile = (content) => {\n  // const drive = google.drive('v3');\n  const jwt = new google.auth.JWT(key.client_email, null, key.private_key, ['https://www.googleapis.com/auth/drive'])\n  // const jwtClient = new google.auth.JWT(\n  //   key.client_email,\n  //   null,\n  //   key.private_key,\n  //   ['https://www.googleapis.com/auth/drive'],\n  //   null\n  // );\n\n  // jwt.authorize((err, response) => {\n  //   console.log(err, response)\n  // })\n  \n  // jwtClient.authorize((authErr) => {\n  //   if (authErr) {\n  //     console.log(authErr);\n  //     return;\n  //   }\n  \n    // Make an authorized requests\n    \n    // List Drive files.\n    // drive.files.list({ auth: jwtClient }, (listErr, resp) => {\n    //   if (listErr) {\n    //     console.log(listErr);\n    //     return;\n    //   }\n    //   resp.files.forEach((file) => {\n    //     console.log(`${file.name} (${file.mimeType})`);\n    //   });\n    // });\n  // });\n}\n\n// export const recordData = ()\n\n// export default class Files {\n//   toggle(activity, tagId, e) {\n//     const {config, updateConfig} = this.props\n//     config[activity][tagId] = !config[activity][tagId]\n//     updateConfig(config)\n//     this.setState({updated: Date.now()})\n//   }\n\n//   buttonClass(activity, tagId, config) {\n//     // console.log(activity, tagId, config[activity][tagId])\n//     return config[activity][tagId] ? 'on' : 'off'\n//   }\n\n//   render() {\n//     const {config} = this.props\n//     console.log('reder')\n//     return (\n//       <div className='config'>\n//         <table>\n//           <thead>\n//           <tr>\n//             <th rowSpan={2}>Activity</th>\n//             <th colSpan={tagIds.length}>Tag ID</th>\n//           </tr>\n//           <tr>\n//             {\n//               tagIds.map(t => {\n//                 return (\n//                   <th key={t}>{t}</th>\n//                 )\n//               })\n//             }\n//           </tr>\n//           </thead>\n//           <tbody>\n//           {\n//             activities.map(a => {\n//               return (\n//               <tr key={a}>\n//                 <th>{a}</th>\n//                 {\n//                   tagIds.map(t => {\n//                     return (\n//                       <td key={t} className='table-option'>\n//                         <input type='checkbox' onChange={this.toggle.bind(this, a, t)} checked={config[a][t]}></input>\n//                       </td>\n//                     )\n//                   })\n//                 }\n//               </tr>\n//               )\n//             })\n//           }\n//           </tbody>\n//         </table>\n//       </div>\n//     )\n//   }\n// }\n\n// const mapStateToProps = state => {\n//   // console.log(state)\n//   if (state.settings && state.settings && state.settings.config) {\n//     console.log('foo', state.settings.config['Drinking']['100'])\n    \n//   }\n//   // console.log(state.settings.settings.config)\n//   return {\n//     config: (state.settings || {}).config\n//   }\n// }\n\n//  const mapDispatchToProps = dispatch => ({\n//   updateConfig: config => dispatch(updateConfig(config))\n//  })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Config)\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { updateConfig } from './actions/settings'\nimport { recordData, resetData } from './actions/data'\nimport { tagIds, activities } from './reducers/settings'\nimport { uploadFile } from './Files'\nimport date from 'date-and-time'\n\nconst uploadFilez = () => uploadFile('do cool stuff')\n\nconst toCsvLines = (settings, lines) => {\n  const line = activities.reduce((values, a) => ([...values, settings[a] ? 1 :0]), []).join(',')\n  return Array(lines).fill(line)\n}\n\nconst fileName = (tag, timestamp) => {\n  return `T-APP-${tag}-${date.format(timestamp, 'YYYY-MM-DD-HH-mm-ss')}.txt`\n}\n\nclass Config extends React.Component {\n  toggle(activity, tagId, e) {\n    const {config, updateConfig} = this.props\n    config[tagId][activity] = !config[tagId][activity]\n    updateConfig(config)\n    this.setState({updated: Date.now()})\n  }\n\n  componentDidMount() {\n    uploadFile('asdfasdfasdf')\n    // this.generateFiles()\n  }\n\n  generateFiles() {\n    setInterval(() => {\n      const {config, tagData, recordData} = this.props\n      const newTagData = Object.keys(config).reduce((all, x) => ({...all, [x]: [...(all[x] || []), ...toCsvLines(config[x], 4)]}), tagData)\n      recordData(newTagData)\n    }, 1000) // Generate 4 records every 1s for each tag\n    setInterval(() => {\n      const {tagData, resetData} = this.props\n      const timestamp = new Date()\n      const fileData = Object.keys(tagData).reduce((all, tag) => {\n        return {...all, [fileName(tag, timestamp)]: tagData[tag].join('\\n')}\n      }, {})\n      console.log(fileData)\n      resetData()\n    }, 15000) // Generate files every 15m (900000)\n  }\n\n  render() {\n    const {config} = this.props\n\n    return (\n      <div className='config'>\n        <table>\n          <thead>\n          <tr>\n            <th rowSpan={2}>Activity</th>\n            <th colSpan={tagIds.length}>Tag ID</th>\n          </tr>\n          <tr>\n            {\n              tagIds.map(t => {\n                return (\n                  <th key={t}>{t}</th>\n                )\n              })\n            }\n          </tr>\n          </thead>\n          <tbody>\n          {\n            activities.map(a => {\n              return (\n              <tr key={a}>\n                <th>{a}</th>\n                {\n                  tagIds.map(t => {\n                    return (\n                      <td key={t} className='table-option'>\n                        <input type='checkbox' onChange={this.toggle.bind(this, a, t)} checked={config[t][a]}></input>\n                      </td>\n                    )\n                  })\n                }\n              </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n        <button onClick={uploadFilez}>Upload It</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    config: (state.settings || {}).config,\n    tagData: (state.data || {})\n  }\n}\n\n const mapDispatchToProps = dispatch => ({\n  updateConfig: config => dispatch(updateConfig(config)),\n  recordData: data => dispatch(recordData(data)),\n  resetData: () => dispatch(resetData())\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Config)\n","export const updateConfig = (config) => dispatch => {\n  dispatch({\n   type: 'UPDATE_CONFIG',\n   payload: config\n  })\n }","export const recordData = (data) => dispatch => {\n  dispatch({\n   type: 'RECORD_DATA',\n   payload: data\n  })\n }\n\nexport const resetData = () => dispatch => {\n  dispatch({\n   type: 'RESET_DATA',\n   payload: []\n  })\n }","import React from 'react';\nimport './App.css';\nimport Config from './Config'\n\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <h2>T-APP</h2>\n      <Config />\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport settings from './settings'\nimport data from './data'\nexport default combineReducers({\n  settings,\n  data\n})","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'RECORD_DATA':\n    return {...state, ...action.payload}\n    case 'RESET_DATA':\n      return {}\n    default:\n    return state\n  }\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n   <App />\n  </Provider>,\n  document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\nexport default function configureStore(initialState={}) {\n return createStore(\n  rootReducer,\n  initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}