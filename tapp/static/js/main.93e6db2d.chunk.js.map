{"version":3,"sources":["reducers/settings.js","Config.js","actions/settings.js","actions/data.js","App.js","serviceWorker.js","reducers/root.js","reducers/data.js","index.js","store.js"],"names":["activities","tagIds","initialConfig","reduce","all","t","values","allActivities","a","Object","objectSpread","defineProperty","Config","activity","tagId","e","_this$props","this","props","config","updateConfig","setState","updated","Date","now","_this","react_default","createElement","className","rowSpan","colSpan","length","map","key","type","onChange","toggle","bind","checked","React","Component","connect","state","settings","tagData","data","dispatch","payload","recordData","resetData","App","src_Config","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","ReactDOM","render","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAAaA,EAAa,CACxB,WACA,SACA,UACA,WACA,UACA,cACA,qBACA,gBACA,aAGWC,EAAS,CACpB,MACA,MACA,MACA,MACA,MACA,MACA,OAGIC,EAAgBD,EAAOE,OAAO,SAACC,EAAKC,GACxC,IAAMC,EAASN,EAAWG,OAAO,SAACI,EAAeC,GAC/C,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIF,EAAXE,OAAAE,EAAA,EAAAF,CAAA,GAA2BD,GAAI,KAC9B,IACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIL,EAAXK,OAAAE,EAAA,EAAAF,CAAA,GAAiBJ,EAAIC,KACpB,ICPGM,iLACGC,EAAUC,EAAOC,GAAG,IAAAC,EACMC,KAAKC,MAA7BC,EADkBH,EAClBG,OAAQC,EADUJ,EACVI,aACfD,EAAOL,GAAOD,IAAaM,EAAOL,GAAOD,GACzCO,EAAaD,GACbF,KAAKI,SAAS,CAACC,QAASC,KAAKC,sFAyBtB,IAAAC,EAAAR,KACAE,EAAUF,KAAKC,MAAfC,OAEP,OACEO,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,UACbF,EAAAlB,EAAAmB,cAAA,aACED,EAAAlB,EAAAmB,cAAA,aACAD,EAAAlB,EAAAmB,cAAA,UACED,EAAAlB,EAAAmB,cAAA,MAAIE,QAAS,GAAb,YACAH,EAAAlB,EAAAmB,cAAA,MAAIG,QAAS7B,EAAO8B,QAApB,WAEFL,EAAAlB,EAAAmB,cAAA,UAEI1B,EAAO+B,IAAI,SAAA3B,GACT,OACEqB,EAAAlB,EAAAmB,cAAA,MAAIM,IAAK5B,GAAIA,OAMrBqB,EAAAlB,EAAAmB,cAAA,aAEE3B,EAAWgC,IAAI,SAAAxB,GACb,OACAkB,EAAAlB,EAAAmB,cAAA,MAAIM,IAAKzB,GACPkB,EAAAlB,EAAAmB,cAAA,UAAKnB,GAEHP,EAAO+B,IAAI,SAAA3B,GACT,OACEqB,EAAAlB,EAAAmB,cAAA,MAAIM,IAAK5B,EAAGuB,UAAU,gBACpBF,EAAAlB,EAAAmB,cAAA,SAAOO,KAAK,WAAWC,SAAUV,EAAKW,OAAOC,KAAKZ,EAAMjB,EAAGH,GAAIiC,QAASnB,EAAOd,GAAGG,qBA7DrF+B,IAAMC,WA2FZC,cAbS,SAAAC,GACtB,MAAO,CACLvB,QAASuB,EAAMC,UAAY,IAAIxB,OAC/ByB,QAAUF,EAAMG,MAAQ,KAIA,SAAAC,GAAQ,MAAK,CACvC1B,aAAc,SAAAD,GAAM,OAAI2B,EC1GE,SAAC3B,GAAD,OAAY,SAAA2B,GACtCA,EAAS,CACRZ,KAAM,gBACNa,QAAS5B,KDuGuBC,CAAaD,KAC9C6B,WAAY,SAAAH,GAAI,OAAIC,EE3GI,SAACD,GAAD,OAAU,SAAAC,GAClCA,EAAS,CACRZ,KAAM,cACNa,QAASF,KFwGmBG,CAAWH,KACxCI,UAAW,kBAAMH,EErGY,SAAAA,GAC7BA,EAAS,CACRZ,KAAM,aACNa,QAAS,UFqGGN,CAA6C7B,GGhG7CsC,MATf,SAAahC,GACX,OACEQ,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OACbF,EAAAlB,EAAAmB,cAAA,mBACAD,EAAAlB,EAAAmB,cAACwB,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECfSC,cAAgB,CAC7Bd,SNgCa,WAA6C,IAA5CD,EAA4CgB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAApC,CAACvC,OAAQjB,GAAgB0D,EAAWF,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EAC1D,OAAQC,EAAO1B,MACd,IAAK,gBACJ,MAAO,CACNf,OAAQyC,EAAOb,SAEjB,QACC,OAAOL,IMtCTG,KCLa,WAAwB,IAAvBH,EAAuBgB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAf,GAAIE,EAAWF,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EACrC,OAAQC,EAAO1B,MACd,IAAK,cACJ,OAAOzB,OAAAC,EAAA,EAAAD,CAAA,GAAIiC,EAAUkB,EAAOb,SAC5B,IAAK,aACH,MAAO,GACT,QACA,OAAOL,MCCXmB,IAASC,OACPpC,EAAAlB,EAAAmB,cAACoC,EAAA,EAAD,CAAUC,MCNG,WAAyC,IAAjBC,EAAiBP,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACnD,OAAOQ,YACNC,EACAF,EACCG,YAAgBC,MDEAC,IAChB5C,EAAAlB,EAAAmB,cAAC4C,EAAD,OAEDC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93e6db2d.chunk.js","sourcesContent":["export const activities = [\n  'Drinking',\n  'Eating',\n  'Walking',\n  'Standing',\n  'Sitting',\n  'Chewing Cud',\n  'High Activity Heat',\n  'Standing Heat',\n  'In Parlor'\n]\n\nexport const tagIds = [\n  '100',\n  '101',\n  '102',\n  '103',\n  '104',\n  '105',\n  '106'\n]\n\nconst initialConfig = tagIds.reduce((all, t) => {\n  const values = activities.reduce((allActivities, a) => {\n    return {...allActivities, [a]: false}\n  }, {})\n  return {...all, [t]: values}\n}, {})\n\n// const initialConfig = activities.reduce((all, x) => {\n//   const tagValues = tagIds.reduce((allTags, t) => {\n//     return {...allTags, [t]: false}\n//   }, {})\n//   return {...all, [x]: tagValues}\n// }, {})\n\nexport default (state = {config: initialConfig}, action) => {\n  switch (action.type) {\n   case 'UPDATE_CONFIG':\n    return {\n     config: action.payload\n    }\n   default:\n    return state\n  }\n }","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { updateConfig } from './actions/settings'\nimport { recordData, resetData } from './actions/data'\nimport { tagIds, activities } from './reducers/settings'\n// import { uploadFile } from './Files'\n// import date from 'date-and-time'\n\n// const uploadFilez = () => uploadFile('do cool stuff')\n\n// const toCsvLines = (settings, lines) => {\n//   const line = activities.reduce((values, a) => ([...values, settings[a] ? 1 :0]), []).join(',')\n//   return Array(lines).fill(line)\n// }\n\n// const fileName = (tag, timestamp) => {\n//   return `T-APP-${tag}-${date.format(timestamp, 'YYYY-MM-DD-HH-mm-ss')}.txt`\n// }\n\nclass Config extends React.Component {\n  toggle(activity, tagId, e) {\n    const {config, updateConfig} = this.props\n    config[tagId][activity] = !config[tagId][activity]\n    updateConfig(config)\n    this.setState({updated: Date.now()})\n  }\n\n  componentDidMount() {\n    // uploadFile('asdfasdfasdf')\n    // this.generateFiles()\n  }\n\n  // generateFiles() {\n  //   setInterval(() => {\n  //     const {config, tagData, recordData} = this.props\n  //     const newTagData = Object.keys(config).reduce((all, x) => ({...all, [x]: [...(all[x] || []), ...toCsvLines(config[x], 4)]}), tagData)\n  //     recordData(newTagData)\n  //   }, 1000) // Generate 4 records every 1s for each tag\n  //   setInterval(() => {\n  //     const {tagData, resetData} = this.props\n  //     const timestamp = new Date()\n  //     const fileData = Object.keys(tagData).reduce((all, tag) => {\n  //       return {...all, [fileName(tag, timestamp)]: tagData[tag].join('\\n')}\n  //     }, {})\n  //     console.log(fileData)\n  //     resetData()\n  //   }, 15000) // Generate files every 15m (900000)\n  // }\n\n  render() {\n    const {config} = this.props\n\n    return (\n      <div className='config'>\n        <table>\n          <thead>\n          <tr>\n            <th rowSpan={2}>Activity</th>\n            <th colSpan={tagIds.length}>Tag ID</th>\n          </tr>\n          <tr>\n            {\n              tagIds.map(t => {\n                return (\n                  <th key={t}>{t}</th>\n                )\n              })\n            }\n          </tr>\n          </thead>\n          <tbody>\n          {\n            activities.map(a => {\n              return (\n              <tr key={a}>\n                <th>{a}</th>\n                {\n                  tagIds.map(t => {\n                    return (\n                      <td key={t} className='table-option'>\n                        <input type='checkbox' onChange={this.toggle.bind(this, a, t)} checked={config[t][a]}></input>\n                      </td>\n                    )\n                  })\n                }\n              </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n        {/* <button onClick={uploadFilez}>Upload It</button> */}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    config: (state.settings || {}).config,\n    tagData: (state.data || {})\n  }\n}\n\n const mapDispatchToProps = dispatch => ({\n  updateConfig: config => dispatch(updateConfig(config)),\n  recordData: data => dispatch(recordData(data)),\n  resetData: () => dispatch(resetData())\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Config)\n","export const updateConfig = (config) => dispatch => {\n  dispatch({\n   type: 'UPDATE_CONFIG',\n   payload: config\n  })\n }","export const recordData = (data) => dispatch => {\n  dispatch({\n   type: 'RECORD_DATA',\n   payload: data\n  })\n }\n\nexport const resetData = () => dispatch => {\n  dispatch({\n   type: 'RESET_DATA',\n   payload: []\n  })\n }","import React from 'react';\nimport './App.css';\nimport Config from './Config'\n\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <h2>T-APP</h2>\n      <Config />\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport settings from './settings'\nimport data from './data'\nexport default combineReducers({\n  settings,\n  data\n})","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'RECORD_DATA':\n    return {...state, ...action.payload}\n    case 'RESET_DATA':\n      return {}\n    default:\n    return state\n  }\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n   <App />\n  </Provider>,\n  document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\nexport default function configureStore(initialState={}) {\n return createStore(\n  rootReducer,\n  initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}