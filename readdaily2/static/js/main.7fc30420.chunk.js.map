{"version":3,"sources":["actions/data.js","App.js","serviceWorker.js","reducers/data.js","reducers/root.js","index.js","store.js"],"names":["loadDay","date","dispatch","action","payload","type","day","value","asMoment","moment","week","month","dayOfYear","readingDay","fetch","then","response","status","json","data","catch","e","console","log","useStyles","makeStyles","theme","root","flexGrow","fontFamily","title","textAlign","bottomBar","width","position","bottom","backgroundColor","reading","margin","readingHeader","padding","fontSize","readingBody","Title","props","classes","className","Typography","variant","style","loadedDay","format","TitleBar","changeDay","Toolbar","IconButton","edge","color","aria-label","onClick","subtract","add","NoReading","Card","CardHeader","disableTypography","Reading","CardActions","ReadButton","passage","Button","startIcon","marginLeft","window","open","encodeURIComponent","ReadingList","readings","length","map","x","key","BottomBar","plan","updatePlanTimeframe","planTimeframeOptions","FormControl","Select","onChange","event","target","marginBottom","marginTop","MenuItem","disabled","Object","keys","loadReadings","readingFormat","readingData","toReading","otReading","push","ot2Reading","psalmsReading","gapReading","letterReading","connect","state","readingPlan","planTimeframe","readingPlanType","loadPlanType","planType","localStorage","setItem","useState","dayChanged","setDayChanged","setLoadedDay","getItem","AppBar","Boolean","location","hostname","match","combineReducers","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fc30420.chunk.js","sourcesContent":["import moment from 'moment'\n\nconst readingDay = value => {\n  const asMoment = moment(value)\n  let week = asMoment.week()\n  // In Moment, the week with Jan1 is week 1, so the last days can fall on that week\n  // Also, week should be zero based for math\n  week = (asMoment.month() === 11 && week === 1 ? 53 : week) - 1\n  return asMoment.day() === 0\n    ? null\n    : asMoment.dayOfYear() - week\n}\n\nexport const loadDay = date => dispatch => {\n  const action = payload => dispatch({ type: 'LOAD_DAY', payload })\n  const day = readingDay(date)\n  fetch(`./data/chapter-bible-reading-plan/${day}.json`).then(response => {\n    switch (response.status) {\n      case 200:\n        response.json()\n          .then(data => action(data))\n          .catch(e => action({}))\n        break\n      default:\n        console.log('Looks like there was a problem. Status Code: ' + response.status)\n        action({})\n    }\n  })\n}\n\nexport const loadPlanType = payload => dispatch => {\n  localStorage.setItem('readDaily-planType', payload)\n  dispatch({ type: 'LOAD_PLAN_TYPE', payload })\n}\n\n","import React, { useState } from 'react'\nimport './App.css'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport ArrowForward from '@material-ui/icons/ArrowForward'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport { loadDay, loadPlanType } from './actions/data'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    fontFamily: 'Helvetica Neue'\n  },\n  title: {\n    textAlign: 'center',\n    flexGrow: 1\n  },\n  bottomBar: {\n    width: '100%',\n    position: 'fixed',\n    textAlign: 'center',\n    bottom: 0,\n    backgroundColor: 'lightGray'\n  },\n  reading: {\n    margin: 10\n  },\n  readingHeader: {\n    backgroundColor: 'lightgray',\n    padding: 8,\n    fontSize: '1.1rem',\n    textAlign: 'center'\n  },\n  readingBody: {\n    padding: 8,\n  }\n}))\n\nfunction Title(props) {\n  const classes = useStyles()\n  return (\n    <div className={classes.title}>\n      <Typography variant=\"h5\">\n        <span style={{ fontFamily: 'times new roman' }}>R</span>ead Daily\n      </Typography>\n      <Typography variant=\"subtitle2\">\n        {props.loadedDay.format('ddd, MMMM Do')}\n      </Typography>\n    </div>\n  )\n}\n\nfunction TitleBar(props) {\n  const { loadedDay, changeDay } = props\n  return (\n    <Toolbar>\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={() => changeDay(loadedDay.subtract(1, 'days'))}>\n        <ArrowBack />\n      </IconButton>\n      <Title loadedDay={loadedDay} />\n      <IconButton edge=\"end\" color=\"inherit\" aria-label=\"menu\" onClick={() => changeDay(loadedDay.add(1, 'days'))}>\n        <ArrowForward />\n      </IconButton>\n    </Toolbar>\n  )\n}\n\nfunction NoReading(props) {\n  const classes = useStyles()\n  return (\n    <Card className={classes.reading}>\n      <CardHeader title='No readings today' disableTypography={true} className={classes.readingHeader} />\n    </Card>\n  )\n}\n\nfunction Reading(props) {\n  const classes = useStyles()\n  const { title, reading } = props\n  return (\n    <Card className={classes.reading}>\n      <CardHeader title={title} disableTypography={true} className={classes.readingHeader} />\n      <CardActions className={classes.readingBody}>\n        {reading}\n        <ReadButton passage={reading} />\n      </CardActions>\n    </Card>\n  )\n}\n\nfunction ReadButton(props) {\n  const { passage } = props\n  const openReading = () => window.open(`http://esv.org/${window.encodeURIComponent(passage)}/`, '_blank')\n  return <Button\n    variant=\"contained\"\n    color=\"default\"\n    startIcon={<LibraryBooksIcon />}\n    style={{ marginLeft: 'auto' }}\n    onClick={openReading}\n  >\n    Read\n</Button>\n}\n\nfunction ReadingList(props) {\n  const { readings } = props\n  return readings && readings.length\n    ? readings.map(x => <Reading key={x.title} title={x.title} reading={x.reading} />)\n    : <NoReading />\n}\n\nfunction BottomBar(props) {\n  const { plan, updatePlanTimeframe } = props\n  const classes = useStyles()\n  const planTimeframeOptions = {\n    '1': 'All In 1 Year',\n    '2:1': '2yr Plan - Year 1',\n    '2:2': '2yr Plan - Year 2'\n  }\n\n  return (\n    <div className={classes.bottomBar}>\n      <FormControl style={{ width: 200 }}>\n        <Select\n          value={plan}\n          onChange={event => updatePlanTimeframe(event.target.value)}\n          style={{ marginBottom: 15, marginTop: 15 }}\n        >\n          <MenuItem value=\"\" disabled>Reading Plan</MenuItem>\n          {Object.keys(planTimeframeOptions).map(x => <MenuItem key={x} value={x}>{planTimeframeOptions[x]}</MenuItem>)}\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nconst loadReadings = (readingFormat, readingData) => {\n  if (!readingData) return null\n  const toReading = (title, reading) => ({ title, reading })\n  const readings = []\n  switch (readingFormat) {\n    case '1':\n      if (readingData.otReading) readings.push(toReading('Old Testament 1', readingData.otReading))\n      if (readingData.ot2Reading) readings.push(toReading('Old Testament 2', readingData.ot2Reading))\n      break\n    case '2:1':\n      if (readingData.otReading) readings.push(toReading('Old Testament', readingData.otReading))\n      break\n    case '2:2':\n      if (readingData.ot2Reading) readings.push(toReading('Old Testament', readingData.ot2Reading))\n      break\n    default:\n      break\n  }\n\n  if (readingData.psalmsReading) readings.push(toReading('Psalms', readingData.psalmsReading))\n  if (readingData.gapReading) readings.push(toReading('Gospels/Acts/Proverbs', readingData.gapReading))\n  if (readingData.letterReading) readings.push(toReading('Letters', readingData.letterReading))\n\n  return readings\n}\n\nfunction App(props) {\n  const { data, loadDay, loadPlanType, planTimeframe } = props\n  const [dayChanged, setDayChanged] = useState(true)\n  const [loadedDay, setLoadedDay] = useState(moment())\n  const classes = useStyles()\n  const readings = loadReadings(planTimeframe, data)\n  if (dayChanged) {\n    loadDay(loadedDay)\n    loadPlanType(localStorage.getItem('readDaily-planType') || '1')\n    setDayChanged(false)\n  }\n\n  const changeDay = day => {\n    setDayChanged(true)\n    setLoadedDay(day)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <TitleBar loadedDay={loadedDay} changeDay={changeDay} />\n      </AppBar>\n      <ReadingList readings={readings} />\n      <BottomBar plan={planTimeframe} updatePlanTimeframe={loadPlanType} />\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  data: (state.data.readingPlan || {}),\n  planTimeframe: (state.data.readingPlanType || '1'),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  loadDay: date => dispatch(loadDay(date)),\n  loadPlanType: planType => dispatch(loadPlanType(planType))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case 'LOAD_DAY':\n      return { ...state, readingPlan: action.payload }\n    case 'LOAD_PLAN_TYPE':\n      return { ...state, readingPlanType: action.payload }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport data from './data'\nexport default combineReducers({\n  data\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk)\n  );\n}"],"sourceRoot":""}